// Introducing to the shix language

// You can do math
1 + 2
2 - 1
2.5 * (7 + (-2))
1/2 + 1
70 % 4

// To see results use the print command
print: 1 + 2 // 3
print: 2 - 1 // 1
print: 2.5 * (7 + (-2)) // 12.5
print: 1/2 + 1 // 1.5
print: 70 % 4 // 2

// Stack syntax
// To save values to the stack use the push command
push: 1 // [1]
push: 2 // [2, 1]

// The last value pushed is on top of the stack
// To get the value at the top of the stack use the read command
print: read // 2

// You can also pop values from the stack (it removes them from the stack and returns them)
print: pop // prints 2 and the stack : [1]

// You can also swap values in the stack, you must have at least 2 values in the stack
push: read // [1, 1]
push: pop + 1 // [2, 1]
swap // [1, 2]

// You can also duplicate values in the stack with the over command
// The argument is the index of the value to duplicate (in the front of the stack)
over: 0 // [1, 1, 2]
// You can also duplicate values within the stack
// The element at index 2 (the third value) is now duplicated at the top of the stack
over: 2 // [2, 1, 1, 2]

// You can also clear the stack with the clear command
clear // []

// There are also some jump commands

// jump command
jump:22 // jumps to line 22
print: 0 // ignored
print: 1 // 1

// jumpZ command is the same as jump command but it jumps if the first argument is 0
push:1 // [1]
jumpZ: read, 26 // the condition is false
print: 0 // not jumped 

push:pop - 1 // [0] 
jumpZ: read, 26 // the condition is true then false for the next time
print: read // -1


// jumpNZ command is the same as jump command but it jumps if the first argument is not 0
jumpNZ: read, 31 // the condition is true
print: 1 // not executed
print: 0 // executed

// jumpN command
print: read // -1
jumpN: read, 35 // the condition is true
print: 1 // not executed
print: 0 // executed

// jumpP command
print: read // -1
jumpP: read, 41 // the condition is true
print: 1 // not executed
print: 0 // executed


